.Dd April 4, 2018
.Dt kv2json 1
.Os
.Sh NAME
.Nm kv2json
.Nd convert key-value input to json
.Sh SYNOPSIS
.Nm
.Op Fl _h
.Op Fl c Ar char
.Op Fl o Ar name
.Op Fl r Ar sep
.Op Fl s Ar sep
.Sh DESCRIPTION
The
.Nm
tool takes plain text key-value data as input and
converts it into json.
.Sh OPTIONS
The following options are supported by
.Nm :
.Bl -tag -width c_char_
.It Fl _
Replace spaces in keys with an underscore (_).
.It Fl c Ar char
Treat 'char' as a comment character or string and
ignore any input including and up to the end of the
line.
Defaults to '#'.
.It Fl h
Display help and exit.
.It Fl o Ar name
Specify the object name to use for non-key-value
prefixes for multiple records.
Defaults to "name".
.It Fl r Ar sep
Specify the record separator to differentiate multiple
elements.
Defaults to an empty line.
.It Fl s Ar sep
Specify the key-value separator.
Defaults to '='.
.El
.Sh DETAILS
Many unix tools and configuration files utilize
trivial key-value pairs as input; many other tools
prefer to use more structured JSON.
The
.Nm
utility can be used to trivially generate JSON from
the input by converting multiple sequences of
key-value separated items into JSON objects.
.Pp
Multiple records or objects can be identified by
separating them via an empty line or by using the
.Fl r
flag.
.Pp
Any non-key-value text immediately preceeding a
key-value block will be interpreted as the name of the
object.
See EXAMPLES for an illustration of this feature.
.Pp
.Nm
reads data from STDIN and writes output to STDOUT.
Whitespace at the beginning or end of the line as well
as around the key-value separator is ignored,
as are comments and multiple empty lines.
.Sh EXAMPLES
The following examples illustrate common usage of this tool.
.Pp
.Bd -literal -offset indent
cat <<EOF | kv2json
> key1 = value1
> key2 = value2
> EOF
[
   {
     "key1" : "value1",
     "key2" : "value2"
   }
]
.Ed
.Pp
To parse multiple records with an object identifier
("name"):
.Bd -literal -offset indent
cat <<EOF | kv2json -s :
> item1
> key1 : value1
> # ignore this line
> key2 : value2
>
> item2
> key1 : value1
> EOF
[
   {
      "key1" : "value1",
      "key2" : "value2",
      "name" : "item1"
   },
   {
      "key1" : "value1",
      "name" : "item2"
   }
]
.Ed
.Pp
Note that duplicate keys will yield an array.
Here, we use "---" as the record separator and "id" as
the object identifier:
.Bd -literal -offset indent
cat <<EOF | kv2json -o id -r ---
> some sort of identifier
> key1 = some value
> key1 = some other value
> key2 = val1
> ---
> second object
> key1 = some value
> key2 = val1
> key2 = val2
> EOF
[
   {
      "id" : "some sort of identifier",
      "key1" : [
         "some value",
         "some other value"
      ],
      "key2" : "val1"
   },
   {
      "id" : "second object",
      "key1" : "some value",
      "key2" : [
         "val1",
         "val2"
      ]
   }
]
.Ed
.Sh EXIT STATUS
.Ex -std 
.Sh SEE ALSO
.Xr jq 1
.Sh HISTORY
.Nm
was originally written by
.An Jan Schaumann
.Aq jschauma@netmeister.org
in March 2018.
.Sh BUGS
Please report bugs and feature requests to the author
via email.
